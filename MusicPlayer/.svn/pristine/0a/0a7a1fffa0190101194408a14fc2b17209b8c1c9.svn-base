package MusicPlayerController;

import static MusicPlayerUtil.MusicPlayerCommon.*;
import java.io.FileInputStream;
import java.lang.management.GarbageCollectorMXBean;
import java.util.ArrayList;
import java.util.LinkedList;

import javax.sound.sampled.*;

import javazoom.jl.decoder.*;
import javazoom.jl.player.*;

public class MusicPlayerController implements Runnable{

	/**
	 * 디코딩을 위해 javazoom이 제공하는 클래스를 오버라이딩
	 * @author 문현석
	 * 2021-07-31
	 */
	static class Sample{
		private short[] buffer;
		private int length;
		
		public Sample(short[] buf, int s) {
			buffer = buf.clone();
			length = s;
		}
		
		public short[] GetBuffer() {
			return buffer;
		}
		
		public int GetLength() {
			return length;
		}
	}
	
	public static final int BUFFER_SIZE = 10000;
	
	private Decoder decoder;
	private AudioDevice out;
	private ArrayList<Sample> playes;
	private int length;
	private int samplingIndex; 				// 샘플링데이터를 읽어 재생할때 현재 샘플링인덱스가 몇인지 기록(일지정지후 다시 재생할때 사용됩니다.)
	
	private Thread thread;
	private boolean isPlayed 	= false;	// 노래 한곡이 끝까지 재생됐을때 true값을 가집니다.
	
	private int state = INIT;
	
	
	public Thread getThread() {
		return this.thread;
	}
	
	public int getState() {
		return state;
	}

	public void setState(int state) {
		this.state = state;
	}
	
	public boolean isPlayed() {
		return isPlayed;
	}

	/**
	 * 음악파일을 읽어올수있는 상태인지 확인합니다.
	 * @return boolean
	 */
	public boolean isInvalid() {
		return (decoder == null || out == null || playes == null || !out.isOpen());
	}
	
	/**
	 * 스트림을 통해 샘플링하여 버퍼에 집어 넣습니다.
	 * @param path
	 * @return 버퍼에 생성가능하고 디코딩 가능한 파일일 경우 true값을 반환합니다.
	 */
	protected synchronized boolean GetPlayes(String path) {
		if(isInvalid()) return false;
		
		try {
			Header header;
			SampleBuffer pb;
			FileInputStream in = new FileInputStream(path);
			Bitstream bitstream = new Bitstream(in);
			if((header = bitstream.readFrame()) == null) return false;
			
			while(length < BUFFER_SIZE && header != null) {
				if(decoder == null)System.out.println("디코더 널임");
				pb = (SampleBuffer)decoder.decodeFrame(header, bitstream);
				playes.add(new Sample(pb.getBuffer(), pb.getBufferLength()));
				length++;
				bitstream.closeFrame();
				header = bitstream.readFrame();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	/**
	 * 재생할 파일의 경로를 파라메터로 받아 디코딩 준비를 합니다.
	 * @author 문현석
	 * 2021-08-02
	 * @param path
	 * @return 디코딩준비에 성공하면 true값을 반환합니다.
	 */
	public synchronized boolean open(String path) {
		try {
			decoder = new Decoder();
			out = FactoryRegistry.systemRegistry().createAudioDevice();
			playes = new ArrayList<Sample>(BUFFER_SIZE);
			length = 0;
			out.open(decoder);
			GetPlayes(path);
		}
		catch(Exception e) {
			decoder = null;
			out = null;
			playes = null;
			return false;
		}
		return true;
	}
	
	/**
	 * 쓰레드를 새로 할당받고 활성화 시킵니다.
	 * @author 문현석
	 * 2021-08-02
	 */
	public void start() {
		synchronized(this) {
			thread = new Thread(this);
			thread.setDaemon(true);
			thread.start();
			state = INIT;
		}
	}
	
	@Override
	public void run() {
		while(!this.thread.isInterrupted()) {
			play();
		}
	}
	
	/**
	 * 버퍼에 저장된 데이터를 꺼내서 오디오 디바이스로 write 합니다.
	 * 재생이 끝나면 close()메서드를 호출합니다.
	 * @author 문현석
	 * 2021-08-02
	 */
	public synchronized void play() {
		if(isInvalid()) return;
		try {
			while(samplingIndex < length){ //현재 재생중이던 샘플링 인덱스는 값이 초기화 되지 않고 다시재생때 쓰입니다.
				
				if(state == SUSPENDED || state == INIT) {
					//재생중 일시정지상태거나 파일로드 초기상태일땐 재생하지 않음.
					return; 
				}
				else if(state == STOPPED) {
					//정지 상태일땐 샘플링인덱스를  0으로 만들고 재생하지 않음.
					samplingIndex = 0;
					return;
				}
				out.write(playes.get(samplingIndex).GetBuffer(), 0, playes.get(samplingIndex).GetLength());
				samplingIndex++;
			}
		}
		catch(JavaLayerException e) {}
		close();
	}
	
	/**
	 * 오디오 디바이스가 할당되어있고 mp3파일의 디코딩 상태가 완료 되었을때
	 * 오디오 디바이스를 종료시키고 디코딩관련 멤버를 초기화 시킵니다
	 * @author 문현석
	 * 2021-08-02
	 */
	public synchronized void close() {
		if((out != null) && !out.isOpen()) out.close();
		
		samplingIndex 	= 0;
		length 			= 0;
		playes 			= null;
		out 			= null;
		decoder 		= null;
	}
}
