package MusicPlayerController;

import static MusicPlayerUtil.MusicPlayerCommon.*;
import java.io.FileInputStream;
import java.lang.management.GarbageCollectorMXBean;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.sound.sampled.*;

import MusicVo.Music;
import javazoom.jl.decoder.*;
import javazoom.jl.player.*;

public class MusicPlayerController implements Runnable{

	/**
	 * 디코딩을 위해 javazoom이 제공하는 클래스를 오버라이딩
	 * @author 문현석
	 * 2021-07-31
	 */
	static class Sample{
		private short[] buffer;
		private int length;
		
		public Sample(short[] buf, int s) {
			buffer = buf.clone();
			length = s;
		}
		
		public short[] GetBuffer() {
			return buffer;
		}
		
		public int GetLength() {
			return length;
		}
	}
	
	/**
	 * 디코딩 관련 멤버입니다
	 */
	public static final int BUFFER_SIZE = 20000;
	private Decoder decoder;
	private AudioDevice out;
	private ArrayList<Sample> playes;
	private int length;
	private int samplingIndex; 						// 샘플링데이터를 읽어 재생할때 현재 샘플링인덱스가 몇인지 기록(일지정지후 다시 재생할때 사용됩니다.)
	private boolean isDecodeSkip 	= false;		// 외부에서 디코딩시간 도중 다른곡으로 전환할때 디코딩을 스킵하게 하는 flag
	private boolean isDecoding 		= false;		// 현재 디코딩 중인지 true false값을 반환 

	private int state 		= INIT;
	private boolean isSkip 	= false;				// 곡을 스킵했을때 빠져나갈 flag
	
	private Thread thread;							
	private boolean isRun = true;					// 쓰레드를 종료시키기위한 flag
	
	
	public int getState() {
		return state;
	}

	public void setState(int state) {
		this.state = state;
	}
	
	public Thread getThread() {
		return thread;
	}
	
	public void closeThread() {
		isRun = false;
	}

	public boolean isSkip() {
		return isSkip;
	}

	public void setSkip(boolean isSkip) {
		this.isSkip = isSkip;
	}
	
	public boolean isDecoding() {
		return isDecoding;
	}

	public void setDecoding(boolean isDecoding) {
		this.isDecoding = isDecoding;
	}
	
	public boolean isDecodeSkip() {
		return isDecodeSkip;
	}

	public void setDecodeSkip(boolean isDecodeSkip) {
		this.isDecodeSkip = isDecodeSkip;
	}
	
	/**
	 * 음악파일을 읽어올수있는 상태인지 확인합니다.
	 * @return boolean
	 */
	public boolean isInvalid() {
		return (decoder == null || out == null || playes == null || !out.isOpen());
	}
	

	/**
	 * 스트림을 통해 샘플링하여 버퍼에 집어 넣습니다.
	 * @param path
	 * @return 버퍼에 생성가능하고 디코딩 가능한 파일일 경우 true값을 반환합니다.
	 */
	protected boolean GetPlayes(String path) {
		if(isInvalid()) return false;
		
		try {
			Header header;
			SampleBuffer pb;
			FileInputStream in = new FileInputStream(path);
			Bitstream bitstream = new Bitstream(in);
			if((header = bitstream.readFrame()) == null) return false;
			
			while(length < BUFFER_SIZE && header != null) {
				isDecoding = true;
				if(decoder == null)System.out.println("디코더 널임");
				pb = (SampleBuffer)decoder.decodeFrame(header, bitstream);
				playes.add(new Sample(pb.getBuffer(), pb.getBufferLength()));
				length++;
				bitstream.closeFrame();
				header = bitstream.readFrame();
				if(isDecodeSkip) { 
				// 외부에서 디코딩시간 도중 다른곡으로 전환할때 디코딩을 스킵하게 하는 flag
					close();
					return false;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	/**
	 * 재생할 파일의 경로를 파라메터로 받아 디코딩 준비를 합니다.
	 * @author 문현석
	 * 2021-08-02
	 * @param path
	 * @return 디코딩준비에 성공하면 true값을 반환합니다.
	 */
	public synchronized boolean open(String path) {
		try {
			decoder = new Decoder();
			out = FactoryRegistry.systemRegistry().createAudioDevice();
			playes = new ArrayList<Sample>(BUFFER_SIZE);
			length = 0;
			out.open(decoder);
			GetPlayes(path);
			isDecoding = false;
		}
		catch(Exception e) {
			decoder = null;
			out = null;
			playes = null;
			return false;
		}
		return true;
	}
	
	/**
	 * 쓰레드를 새로 할당받고 활성화 시킵니다.
	 * @author 문현석
	 * 2021-08-02
	 */
	public void start() {
		synchronized(this) {
			if(this.thread == null) {
				this.thread = new Thread(this);
			}
			this.thread.start();
		}
	}
	
	/**play메서드만 재생시키는 쓰레드입니다.
	 * isRun 값이 false가 됐을때 실행을 종료합니다.
	 * @author 문현석
	 * 2021-08-05
	 */
	@Override
	public void run() {
		while(isRun) {
			play();
		}
		close();
		this.state = INIT;
		this.isRun = true;
		this.thread = null;
	}
	
	/**
	 * 버퍼에 저장된 데이터를 꺼내서 오디오 디바이스로 write 합니다.
	 * 재생이 끝나면 close()메서드를 호출합니다.
	 * @author 문현석
	 * 2021-08-02
	 */
	public synchronized void play() {
		if(isInvalid()) return;
		try {
			while(samplingIndex < length){ //현재 재생중이던 샘플링 인덱스는 값이 초기화 되지 않고 다시재생때 쓰입니다.
				if(!isRun || isSkip) return; // 쓰레드를 멈출때 or 곡을 스킵할때 빠져나갑니다.
				if(state == SUSPENDED || state == INIT) {
					//재생중 일시정지상태거나 파일로드 초기상태일땐 재생하지 않음.
					return; 
				}
				else if(state == STOPPED) {
					//정지 상태일땐 샘플링인덱스를  0으로 만들고 재생하지 않음.
					samplingIndex = 0;
					return;
				}
				out.write(playes.get(samplingIndex).GetBuffer(), 0, playes.get(samplingIndex).GetLength());
				samplingIndex++;
			}
		}
		catch(JavaLayerException e) {}
		close();
		state = FINISHED;
	}

	/**리스트 자동재생, 반복재생, 한곡반복재생, 한곡만 재생에 대한
	 * 알고리즘입니다.
	 * @author 문현석
	 * 2021-08-05
	 */
	/**
	 * 서비스쪽에서 구현해야할것같아서 비활성화 시켰습니다.
	public void autoPlay() {
		if(!isAuto)return; 											//자동재생이 아닐경우 다음곡을 재생하지 않음
		
		if(state == FINISHED){ 										//한곡의 재생이 끝났을경우
			if(oneLoop) { 											//한곡만 반복일경우 
//				open(playList.get(playIndex).getPath());
				isLoad = true;
//				state = STARTED;
				return;
			}
			
			playIndex++; 											// 전체 재생이나 전체반복 재생일 경우 다음곡을 재생하기위해 인덱스를 증가십니다.
			
			if(allLoop) { 											//전체반복재생일경우 
				if(playIndex >= playList.size()) playIndex = 0; 	//인덱스가 최대를 넘어갔을때 다시 0번째 곡부터 재생합니다
//				open(playList.get(playIndex).getPath());
				isLoad = true;
//				state = STARTED;
			}
			else{ //반복재생이 아닐경우 빠져나감.
				if(playIndex >= playList.size()) playIndex = 0;	
				System.out.println("재생목록이 끝났습니다.");
			}
		}
	}
	*/
	
	/**
	 * 오디오 디바이스가 할당되어있고 mp3파일의 디코딩 상태가 완료 되었을때 호출하면
	 * 오디오 디바이스를 종료시키고 디코딩관련 멤버를 초기화 시킵니다
	 * @author 문현석
	 * 2021-08-02
	 */
	public synchronized void close() {
		if((out != null) && !out.isOpen()) out.close();
		
		isSkip			= false;
		isDecodeSkip	= false;
		isDecoding		= false;
		samplingIndex 	= 0;
		length 			= 0;
		playes 			= null;
		out 			= null;
		decoder 		= null;
	}
}
