package MusicPlayerController;

import static MusicPlayerUtil.MusicPlayerCommon.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import MusicVo.Music;

/**
 * 뮤직플레이어 컨트롤러 클래스를 이용한 다양한 뮤직컨트롤 메서드를 제공합니다
 * @author 문현석
 * 2021-08-02
 *
 */
public class MusicPlayerControllerServiceImpl implements MusicPlayerControllerService{
	
	private List<Music> playList;
	private MusicPlayerController mpc = new MusicPlayerController();
	
	private int playIndex 		= 0; 			// 현재 재생순번을 기록하는 변수
	/**외부에서 뮤직리스트를 입력받았을때 플레이인덱스 또한 0으로 초기화 해줍니다.
	 * 또한기존리스트의 인스턴스와 연결을 끊습니다.
	 * @author 문현석
	 * 2021-08-03
	 */
	public void setPlayList(List<Music> playList) {
		this.playList = null;
		this.playList = new ArrayList<>(playList);
		this.playIndex = 0;
	}

	/**
	 * 입력된 키값에 따라 컨트롤러를 조작합니다.
	 * @author 문현석
	 * 2021-08-03
	 */
	public void playListControl() {
		if(playList == null) {
			System.out.println("재생할 리스트가 없습니다.");
			return;
		}
		else if(playList.isEmpty()){
			System.out.println("재생할 리스트가 없습니다.");
			return;
		}
		
		String musicPath = playList.get(playIndex).getPath();
		mpc.open(musicPath);
		mpc.start();
		
		while(true) {
			System.out.println("\n\n\n\n\n");
			System.out.println("다음 곡명 : " + playList.get(playIndex + 1).getTag(TITLE));
			System.out.println("현재 곡명 : " + playList.get(playIndex).getTag(TITLE));
			int input = nextInt("1.재생/일시정지    2.정지    3.이전곡    4.다음곡    5.종료");
			int musicState = mpc.getState();
			
			switch (input) {
			case 1: //.재생
				play(musicState);
				break;
				
			case 2: //.정지
				mpc.setState(STOPPED);
				System.out.println("정지");
				break;
				
			case 3: //.리스트의 이전곡 선택 공통된 코드를 따로 만들것
				playIndex--;
				playSequence(musicState);
				break;
				
			case 4: //.리스트의 다음곡 선택
				playIndex++;
				playSequence(musicState);
				break;
				
			case 5:
				return;
			default:
				break;
			}
		}
	}
	
	/**
	 * 뮤직컨트롤 쓰레드의 재생상태에따라서 재생할지 일시정지 할지 결정합니다.
	 * @author 문현석
	 * 2021-08-04
	 * @param musicState
	 */
	private void play(int musicState) {
		if(musicState == STARTED) {
			mpc.setState(SUSPENDED);
		}
		else if(musicState == SUSPENDED) {
			mpc.setState(STARTED);
		}
		else {
			mpc.setState(STARTED);
		}
	}
	
	/**
	 * 다음곡, 이전곡 기능을 구현한 메서드입니다.
	 * @author 문현석
	 * 2021-08-04
	 * @param musicState(mp3파일을 재생중인 쓰레드의 재생상태)
	 * @param sqsIndex(다음곡인지 이전곡인지 전달하는 정수형 변수입니다)
	 */
	private void playSequence(int musicState) {
		mpc.setState(STOPPED);
		mpc.close();
		if(playIndex < 0 ) playIndex = playList.size() -1;
		else if(playIndex >= playList.size()) playIndex = 0;
		mpc.open(playList.get(playIndex).getPath()); //null값이 됨
		mpc.setState(musicState);
	}
}
