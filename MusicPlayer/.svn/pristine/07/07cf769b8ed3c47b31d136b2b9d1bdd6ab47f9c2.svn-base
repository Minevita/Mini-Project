package MusicPlayerUtil;

import static MusicPlayerUtil.MusicPlayerCommon.*;
import MusicPlayerService.*;

import java.io.ObjectInputStream.GetField;
import java.util.ArrayList;
import java.util.List;

import MusicVo.Music;
import UserVo.*;
/**
 * @author 김문수
 * 2021-08-05
 * MusicPlayerServiceimpl에 있는 리스트 출력용 메서드를 클래스로 생성.
 * 메서드 여러개로 나눔.
 */

public class PageViewer {
	ArrayList<String> list = new ArrayList<String>();
	List<Music> musicList = new ArrayList<Music>();
	MusicPlayerServiceimpl mps;
	private int printNum=10; // 표시될 음악 갯수
	
	private int pageNum;  // 페이지수
	private int startNum; // 시작
	private int endNum;   // 끝
	private int listNum;  // 페이지 내 리스트 순차 번호
	private int curPage = 1;  // 현재페이지
	private int prevPage; // 이전
	private int nextPage; // 다음
	private int musicNum; // 음악 총합
	
	
	
	public PageViewer(MusicPlayerServiceimpl mps) {
		super();
		this.mps = mps;
	}

	// 테스트용 메인
	public static void main(String[] args) {
		MusicPlayerServiceimpl mps = new MusicPlayerServiceimpl();
		PageViewer pv = new PageViewer(mps);
		pv.display("top100", mps.getAllList());
		
		
	}
	
	public void createMusic() {
		// 테스트 데이터 생성
	for(int i=0;i<56;i++) {
			int index = i + 1;
			list.add( index + "번 음악");
		}
	}
	
	/**
	 * @author 김문수
	 * 2021-08-06
	 * 통합 출력용 메서드. 리스트를 보여주고, 선택용 버튼을 구현.
	 */
	public void display(String listName, List<?> list) {
		if(list == null) {
			System.out.println("잘못된 리스트입니다.");
		}
		else if(list.isEmpty()) {
			System.out.println("잘못된 리스트입니다.");
		}
		
		if(list.get(0).getClass().getSimpleName().equals("Music")) {
			musicNum = list.size();
			allListViewer(listName,list);
			System.out.println(getPageElements());
			pageButton(listName, list);
		}
		else if(list.get(0).getClass().getSimpleName().equals("String")) {
			musicNum = list.size();
			allListViewer(listName, list);
			System.out.println(getPageElements());
			pageButton(listName, list);
		}
		else {
			System.out.println("잘못된 리스트입니다.");
		}
		curPage = 1;
	}
	
	public String getPageElements() {
		int totalPage = getTotalPage();
		boolean prevPage = curPage > 1;
		boolean nextPage = curPage < totalPage;
		return "\n" + " Pages : " + curPage + " / " + totalPage + "\n" + (prevPage ? "이전 : 1    " : "") + (nextPage ? "다음 : 2    " : "") +
				"선택 : 3    검색 : 4    종료 : 5";
	}
	
	public int getTotalPage() {
		return (int)Math.ceil(musicNum/(double) printNum);
	}
	
	public void allListViewer(String listName, List<?> list) {
		int listNum = 0;
		int startNum = (curPage -1) * printNum;
		int endNum = startNum + printNum;
		if (list.isEmpty()) {
			System.out.println("\n\n\n\n\n\n");
			System.out.println("리스트가 비었습니다.");
			return;
		}else {
			try {
			int musicNum = list.size();
			System.out.println("\n" + listName);
			System.out.println("========================================================================================================");
			System.out.println("              곡명                           가수                       앨범                장르        ");
			System.out.println("========================================================================================================");
			for (int i = startNum; i < endNum; i++) {
				if(i > musicNum) break;
				System.out.printf("%d. %s%n",listNum += 1, list.get(i));
			}
			}catch(IndexOutOfBoundsException e) {}
			System.out.println("========================================================================================================");
		}
	}
	
	public void pageButton(String listName, List<?> list) {
		int input = nextInt("");
		switch(input) {
		case 1:
			if(1 < curPage) {
			curPage -= 1;
			}
			display(listName, list);
			break;
		case 2:
			if(getTotalPage() > curPage) {
			curPage +=1;
			}
			display(listName, list);
			break;
		case 3:
			input = nextInt("번호를 고르세요.");
//			user.getPlayList().get(list.get(startNum + input));
			//곡선택
//			mps.pick();
			break;
		case 4:
			//검색
			mps.search(list);
			break;
		case 5:
			//종료
			return;
		}
	}


	public int getPrintNum() {
		return printNum;
	}

	public void setPrintNum(int printNum) {
		this.printNum = printNum;
	}

	public int getPageNum() {
		return pageNum;
	}

	public void setPageNum(int pageNum) {
		this.pageNum = pageNum;
	}

	public int getPrevPage() {
		return prevPage;
	}

	public void setPrevPage(int prevPage) {
		this.prevPage = prevPage;
	}

	public int getNextPage() {
		return nextPage;
	}

	public void setNextPage(int nextPage) {
		this.nextPage = nextPage;
	}

	public int getMusicNum() {
		return musicNum;
	}

	public void setMusicNum(int musicNum) {
		this.musicNum = musicNum;
	}

	public int getStartNum() {
		return startNum;
	}

	public void setStartNum(int startNum) {
		this.startNum = startNum;
	}

	public int getEndNum() {
		return endNum;
	}

	public void setEndNum(int endNum) {
		this.endNum = endNum;
	}

	public int getListNum() {
		return listNum;
	}

	public void setListNum(int listNum) {
		this.listNum = listNum;
	}

	public int getCurPage() {
		return curPage;
	}

	public void setCurPage(int curPage) {
		this.curPage = curPage;
	}

	
}
